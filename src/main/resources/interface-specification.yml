openapi: 3.0.3
info:
  title: Agreement Management Micro Service
  description: 'This is a sample server'
  version: 0.0.1
  contact:
    name: API Support
    url: http://www.example.com/support
    email: support@example.com
  termsOfService: 'http://swagger.io/terms/'
  x-api-id: an x-api-id
  x-summary: an x-summary
servers:
  - url: https://gateway.interop.pdnd.dev/pdnd-interop-uservice-agreement-management/0.0.1
    description: This service is agreement manager
#security:
#  - bearerAuth: [ ]
tags:
  - name: agreement
    description: Everything about your Agreement
    externalDocs:
      description: Find out more
      url: http://swagger.io
paths:
  /agreements:
    post:
      tags:
        - agreement
      summary: Add a new agreement
      operationId: addAgreement
      security:
        - bearerAuth: [ ]
      requestBody:
        description: A Agreement seed
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AgreementSeed'
        required: true
      responses:
        "200":
          description: Agreement created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agreement'
        "405":
          description: Invalid input
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
    get:
      tags:
        - agreement
      summary: Retrieve a list of agreement
      operationId: getAgreements
      parameters:
        - in: query
          name: producerId
          schema:
            type: string
        - in: query
          name: consumerId
          schema:
            type: string
        - in: query
          name: status
          schema:
            type: string
            enum: [draft, active, suspended]
      responses:
        "200":
          description: A list of Agreement
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agreements'
  /agreements/{agreement_id}:
    get:
      tags:
        - agreement
      summary: Get an agreement
      operationId: getAgreement
      security:
        - bearerAuth: [ ]
      parameters:
        - name: agreement_id
          in: path
          description: the agreement id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Agreement retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agreement'
        '404':
          description: Agreement not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '400':
          description: Bad request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
components:
  schemas:
    AgreementSeed:
      type: object
      required:
        - eserviceId
        - producerId
        - consumerId
      properties:
        eserviceId:
          type: string
          format: uuid
        producerId:
          type: string
          format: uuid
        consumerId:
          type: string
          format: uuid
    Agreement:
      type: object
      required:
        - id
        - eserviceId
        - producerId
        - consumerId
        - status
      properties:
        id:
          type: string
          format: uuid
        eserviceId:
          type: string
          format: uuid
        producerId:
          type: string
          format: uuid
        consumerId:
          type: string
          format: uuid
        status:
          type: string
          enum: ['active']
    Agreements:
      type: array
      items:
        $ref: '#/components/schemas/Agreement'
    Problem:
      properties:
        detail:
          description:
            A human readable explanation specific to this occurrence of the problem.
          example: Request took too long to complete.
          maxLength: 4096
          pattern: '^.{0,1024}$'
          type: string
        status:
          description:
            The HTTP status code generated by the origin server for this occurrence
            of the problem.
          example: 503
          exclusiveMaximum: true
          format: int32
          maximum: 600
          minimum: 100
          type: integer
        title:
          description:
            A short, summary of the problem type. Written in english and readable
          example: Service Unavailable
          maxLength: 64
          pattern: '^[ -~]{0,64}$'
          type: string
      additionalProperties: false
      required:
        - status
        - title
  securitySchemes:
    bearerAuth:
      type: http
      description: A bearer token in the format of a JWS and comformed to the specifications included in [RFC8725](https://tools.ietf.org/html/RFC8725).
      scheme: bearer
      bearerFormat: JWT