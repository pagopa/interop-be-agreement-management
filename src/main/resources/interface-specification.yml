openapi: 3.0.3
info:
  title: Agreement Management Micro Service
  description: defines the persistence operations for the agreement
  version: 0.0.1
  contact:
    name: API Support
    url: 'http://www.example.com/support'
    email: support@example.com
  termsOfService: 'http://swagger.io/terms/'
  x-api-id: an x-api-id
  x-summary: an x-summary
servers:
  - url: 'https://gateway.interop.pdnd.dev/pdnd-interop-uservice-agreement-management/0.0.1'
    description: This service is agreement manager
tags:
  - name: agreement
    description: Everything about your Agreement
    externalDocs:
      description: Find out more
      url: 'http://swagger.io'
paths:
  '/agreement/{agreement_id}':
    get:
      tags:
        - agreement
      summary: Get an agreement
      operationId: getAgreement
      security:
        - bearerAuth: []
      parameters:
        - name: agreement_id
          in: path
          description: the agreement id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Agreement retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agreement'
        '400':
          description: Bad request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Agreement not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
  '/agreements/{agreementId}/upgrade':
    post:
      security:
        - bearerAuth: [ ]
      tags:
        - agreement
      summary: upgrades an agreement.
      description: upgrades an agreement with a newer eservice version, if any.
      operationId: upgradeAgreementById
      parameters:
        - name: agreementId
          in: path
          description: The identifier of the agreement to update
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: The updated agreement data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AgreementSeed'
        required: true
      responses:
        '200':
          description: Agreement updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agreement'
        '404':
          description: Agreement not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '400':
          description: Invalid ID supplied
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
  /agreements:
    post:
      tags:
        - agreement
      summary: Add a new agreement
      operationId: addAgreement
      security:
        - bearerAuth: []
      requestBody:
        description: A Agreement seed
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AgreementSeed'
        required: true
      responses:
        '200':
          description: Agreement created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agreement'
        '405':
          description: Invalid input
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
    get:
      tags:
        - agreement
      summary: Retrieve a list of agreement
      operationId: getAgreements
      security:
        - bearerAuth: [ ]
      parameters:
        - in: query
          name: producerId
          schema:
            type: string
        - in: query
          name: consumerId
          schema:
            type: string
        - in: query
          name: eserviceId
          schema:
            type: string
        - in: query
          name: descriptorId
          schema:
            type: string
        - in: query
          name: status
          schema:
            type: string
            enum:
              - pending
              - active
              - suspended
              - inactive
      responses:
        '200':
          description: A list of Agreement
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agreements'
  '/agreements/{agreement_id}/attribute':
    parameters:
      - schema:
          type: string
        name: agreement_id
        in: path
        required: true
    patch:
      tags:
        - agreement
      summary: Update Verified Attribute
      operationId: updateAgreementVerifiedAttribute
      responses:
        '200':
          description: Returns the agreement with the updated attribute state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agreement'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Resource Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      description: patches the verified attribute of the agreement as specified in the operation payload.
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifiedAttributeSeed'
        description: the updated attribute
        required: true
  '/agreements/{agreement_id}/activate':
    patch:
      summary: Activate Agreement
      operationId: activateAgreement
      parameters:
        - schema:
            type: string
          name: agreement_id
          in: path
          required: true
      requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusChangeDetails'
          required: true
      responses:
        '200':
          description: Agreement activated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agreement'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Agreement not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      description: 'activates the agreement, if any.'
      security:
        - bearerAuth: [ ]
      tags:
        - agreement
  '/agreements/{agreement_id}/suspend':
    patch:
      summary: Suspend Agreement
      operationId: suspendAgreement
      parameters:
        - schema:
            type: string
          name: agreement_id
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StatusChangeDetails'
        description: the updated attribute
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agreement'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Agreement Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      tags:
        - agreement
      description: suspends the agreement by id
      security:
        - bearerAuth: [ ]
components:
  schemas:
    StatusChangeDetails:
      type: object
      description: tracks the owner of the change.
      properties:
        changedBy:
          type: string
          enum:
            - producer
            - consumer
    AgreementSeed:
      type: object
      description: contains the expected payload for attributes persistence.
      properties:
        eserviceId:
          type: string
          format: uuid
        descriptorId:
          type: string
          format: uuid
        producerId:
          type: string
          format: uuid
        consumerId:
          type: string
          format: uuid
        verifiedAttributes:
          type: array
          description: 'set of the verified attributes belonging to this agreement, if any.'
          items:
            $ref: '#/components/schemas/VerifiedAttributeSeed'
      required:
        - eserviceId
        - descriptorId
        - producerId
        - consumerId
        - verifiedAttributes
    Agreement:
      type: object
      properties:
        id:
          type: string
          format: uuid
        eserviceId:
          type: string
          format: uuid
        descriptorId:
          type: string
          format: uuid
        producerId:
          type: string
          format: uuid
        consumerId:
          type: string
          format: uuid
        status:
          type: string
          enum:
            - active
            - pending
            - suspended
            - inactive
        verifiedAttributes:
          type: array
          description: 'set of the verified attributes belonging to this agreement, if any.'
          items:
            $ref: '#/components/schemas/VerifiedAttribute'
        suspendedByConsumer:
          type: boolean
        suspendedByProducer:
          type: boolean
      required:
        - id
        - eserviceId
        - descriptorId
        - producerId
        - consumerId
        - status
        - verifiedAttributes
      description: business representation of an agreement
    Agreements:
      type: array
      items:
        $ref: '#/components/schemas/Agreement'
    Problem:
      properties:
        detail:
          description: A human readable explanation specific to this occurrence of the problem.
          example: Request took too long to complete.
          maxLength: 4096
          pattern: '^.{0,1024}$'
          type: string
        status:
          description: The HTTP status code generated by the origin server for this occurrence of the problem.
          example: 503
          exclusiveMaximum: true
          format: int32
          maximum: 600
          minimum: 100
          type: integer
        title:
          description: 'A short, summary of the problem type. Written in english and readable'
          example: Service Unavailable
          maxLength: 64
          pattern: '^[ -~]{0,64}$'
          type: string
      additionalProperties: false
      required:
        - status
        - title
    VerifiedAttribute:
      title: VerifiedAttribute
      type: object
      description: represents the details of a verified attribute bound to the agreement.
      properties:
        id:
          type: string
          description: identifier of the attribute as defined on the attribute registry
          format: uuid
        verified:
          type: boolean
          description: flag stating the current verification state of this attribute
        verificationDate:
          type: string
          description: 'timestamp containing the instant of the verification, if any.'
          format: date-time
        validityTimespan:
          type: integer
          format: int64
          description: 'optional validity timespan, in seconds.'
          exclusiveMinimum: false
          minimum: 1
      required:
        - id
    VerifiedAttributeSeed:
      title: VerifiedAttributeSeed
      type: object
      description: represents the details of a verified attribute bound to the agreement.
      properties:
        id:
          type: string
          description: identifier of the attribute as defined on the attribute registry
          format: uuid
        verified:
          type: boolean
          description: flag stating the current verification state of this attribute
        validityTimespan:
          type: integer
          format: int64
          description: 'optional validity timespan, in seconds.'
          exclusiveMinimum: false
          minimum: 1
      required:
        - id
  securitySchemes:
    bearerAuth:
      type: http
      description: 'A bearer token in the format of a JWS and conformed to the specifications included in [RFC8725](https://tools.ietf.org/html/RFC8725).'
      scheme: bearer
      bearerFormat: JWT d'Interoperabilità di AgID (default)