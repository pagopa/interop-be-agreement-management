/**
 * Agreement Management Micro Service
 * defines the persistence operations for the agreement
 *
 * The version of the OpenAPI document: {{version}}
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package it.pagopa.pdnd.interop.uservice.agreementmanagement.client.api

import it.pagopa.pdnd.interop.uservice.agreementmanagement.client.model.Agreement
import it.pagopa.pdnd.interop.uservice.agreementmanagement.client.model.AgreementSeed
import it.pagopa.pdnd.interop.uservice.agreementmanagement.client.model.Problem
import it.pagopa.pdnd.interop.uservice.agreementmanagement.client.model.StatusChangeDetails
import java.util.UUID
import it.pagopa.pdnd.interop.uservice.agreementmanagement.client.model.VerifiedAttributeSeed
import it.pagopa.pdnd.interop.uservice.agreementmanagement.client.invoker._
import it.pagopa.pdnd.interop.uservice.agreementmanagement.client.invoker.CollectionFormats._
import it.pagopa.pdnd.interop.uservice.agreementmanagement.client.invoker.ApiKeyLocations._

object AgreementApi {

  def apply(baseUrl: String = "https://gateway.interop.pdnd.dev/pdnd-interop-uservice-agreement-management/}") = new AgreementApi(baseUrl)
}

class AgreementApi(baseUrl: String) {

  /**
   * activates the agreement, if any.
   * 
   * Expected answers:
   *   code 200 : Agreement (Agreement activated)
   *   code 400 : Problem (Bad Request)
   *   code 404 : Problem (Agreement not found)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param agreementId 
   * @param statusChangeDetails 
   */
  def activateAgreement(agreementId: String, statusChangeDetails: StatusChangeDetails)(implicit bearerToken: BearerToken): ApiRequest[Agreement] =
    ApiRequest[Agreement](ApiMethods.PATCH, baseUrl, "/agreements/{agreement_id}/activate", "application/json")
      .withCredentials(bearerToken).withBody(statusChangeDetails)
      .withPathParam("agreement_id", agreementId)
      .withSuccessResponse[Agreement](200)
      .withErrorResponse[Problem](400)
      .withErrorResponse[Problem](404)
      

  /**
   * Expected answers:
   *   code 200 : Agreement (Agreement created)
   *   code 405 : Problem (Invalid input)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param agreementSeed A Agreement seed
   */
  def addAgreement(agreementSeed: AgreementSeed)(implicit bearerToken: BearerToken): ApiRequest[Agreement] =
    ApiRequest[Agreement](ApiMethods.POST, baseUrl, "/agreements", "application/json")
      .withCredentials(bearerToken).withBody(agreementSeed)
      .withSuccessResponse[Agreement](200)
      .withErrorResponse[Problem](405)
      

  /**
   * Expected answers:
   *   code 200 : Agreement (Agreement retrieved)
   *   code 400 : Problem (Bad request)
   *   code 404 : Problem (Agreement not found)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param agreementId the agreement id
   */
  def getAgreement(agreementId: String)(implicit bearerToken: BearerToken): ApiRequest[Agreement] =
    ApiRequest[Agreement](ApiMethods.GET, baseUrl, "/agreement/{agreement_id}", "application/json")
      .withCredentials(bearerToken).withPathParam("agreement_id", agreementId)
      .withSuccessResponse[Agreement](200)
      .withErrorResponse[Problem](400)
      .withErrorResponse[Problem](404)
      

  /**
   * Expected answers:
   *   code 200 : Seq[Agreement] (A list of Agreement)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param producerId 
   * @param consumerId 
   * @param eserviceId 
   * @param descriptorId 
   * @param status 
   */
  def getAgreements(producerId: Option[String] = None, consumerId: Option[String] = None, eserviceId: Option[String] = None, descriptorId: Option[String] = None, status: Option[String] = None)(implicit bearerToken: BearerToken): ApiRequest[Seq[Agreement]] =
    ApiRequest[Seq[Agreement]](ApiMethods.GET, baseUrl, "/agreements", "application/json")
      .withCredentials(bearerToken).withQueryParam("producerId", producerId)
      .withQueryParam("consumerId", consumerId)
      .withQueryParam("eserviceId", eserviceId)
      .withQueryParam("descriptorId", descriptorId)
      .withQueryParam("status", status)
      .withSuccessResponse[Seq[Agreement]](200)
      

  /**
   * suspends the agreement by id
   * 
   * Expected answers:
   *   code 200 : Agreement (OK)
   *   code 400 : Problem (Bad Request)
   *   code 404 : Problem (Agreement Not Found)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param agreementId 
   * @param statusChangeDetails the updated attribute
   */
  def suspendAgreement(agreementId: String, statusChangeDetails: StatusChangeDetails)(implicit bearerToken: BearerToken): ApiRequest[Agreement] =
    ApiRequest[Agreement](ApiMethods.PATCH, baseUrl, "/agreements/{agreement_id}/suspend", "application/json")
      .withCredentials(bearerToken).withBody(statusChangeDetails)
      .withPathParam("agreement_id", agreementId)
      .withSuccessResponse[Agreement](200)
      .withErrorResponse[Problem](400)
      .withErrorResponse[Problem](404)
      

  /**
   * patches the verified attribute of the agreement as specified in the operation payload.
   * 
   * Expected answers:
   *   code 200 : Agreement (Returns the agreement with the updated attribute state.)
   *   code 400 : Problem (Bad Request)
   *   code 404 : Problem (Resource Not Found)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param agreementId 
   * @param verifiedAttributeSeed the updated attribute
   */
  def updateAgreementVerifiedAttribute(agreementId: String, verifiedAttributeSeed: VerifiedAttributeSeed)(implicit bearerToken: BearerToken): ApiRequest[Agreement] =
    ApiRequest[Agreement](ApiMethods.PATCH, baseUrl, "/agreements/{agreement_id}/attribute", "application/json")
      .withCredentials(bearerToken).withBody(verifiedAttributeSeed)
      .withPathParam("agreement_id", agreementId)
      .withSuccessResponse[Agreement](200)
      .withErrorResponse[Problem](400)
      .withErrorResponse[Problem](404)
      

  /**
   * upgrades an agreement with a newer eservice version, if any.
   * 
   * Expected answers:
   *   code 200 : Agreement (Agreement updated.)
   *   code 404 : Problem (Agreement not found)
   *   code 400 : Problem (Invalid ID supplied)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param agreementId The identifier of the agreement to update
   * @param agreementSeed The updated agreement data
   */
  def upgradeAgreementById(agreementId: UUID, agreementSeed: AgreementSeed)(implicit bearerToken: BearerToken): ApiRequest[Agreement] =
    ApiRequest[Agreement](ApiMethods.POST, baseUrl, "/agreements/{agreementId}/upgrade", "application/json")
      .withCredentials(bearerToken).withBody(agreementSeed)
      .withPathParam("agreementId", agreementId)
      .withSuccessResponse[Agreement](200)
      .withErrorResponse[Problem](404)
      .withErrorResponse[Problem](400)
      



}

