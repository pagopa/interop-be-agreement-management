openapi: 3.0.3
info:
  title: Agreement Management Micro Service
  description: defines the persistence operations for the agreement
  version: '{{version}}'
  contact:
    name: API Support
    url: 'http://www.example.com/support'
    email: support@example.com
  termsOfService: 'http://swagger.io/terms/'
  x-api-id: an x-api-id
  x-summary: an x-summary
servers:
  - url: '/agreement-management/{{version}}'
    description: This service is agreement manager
tags:
  - name: agreement
    description: Everything about your Agreement
    externalDocs:
      description: Find out more
      url: 'http://swagger.io'
paths:
  '/agreements/{agreementId}':
    parameters:
      - $ref: '#/components/parameters/CorrelationIdHeader'
      - $ref: '#/components/parameters/IpAddress'
      - name: agreementId
        in: path
        description: the agreement id
        required: true
        schema:
          type: string
    get:
      tags:
        - agreement
      summary: Get an agreement
      operationId: getAgreement
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Agreement retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agreement'
        '404':
          description: Agreement not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
    delete:
      security:
        - bearerAuth: []
      tags:
        - agreement
      summary: Delete an agreement. This operation is valid only for agreements in draft
      operationId: deleteAgreement
      responses:
        '204':
          description: Agreement deleted
        '400':
          description: Invalid input
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Agreement not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
  '/agreements/{agreementId}/upgrade':
    parameters:
      - $ref: '#/components/parameters/CorrelationIdHeader'
      - $ref: '#/components/parameters/IpAddress'
    post:
      security:
        - bearerAuth: []
      tags:
        - agreement
      summary: upgrades an agreement.
      description: upgrades an agreement with a newer eservice version, if any.
      operationId: upgradeAgreementById
      parameters:
        - name: agreementId
          in: path
          description: The identifier of the agreement to upgrade
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: The upgraded agreement data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpgradeAgreementSeed'
        required: true
      responses:
        '200':
          description: Agreement upgraded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agreement'
        '404':
          description: Agreement not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '400':
          description: Invalid ID supplied
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
  '/agreements/{agreementId}/update':
    parameters:
      - $ref: '#/components/parameters/CorrelationIdHeader'
      - $ref: '#/components/parameters/IpAddress'
    post:
      security:
        - bearerAuth: []
      tags:
        - agreement
      summary: updates an agreement.
      description: updates an agreement
      operationId: updateAgreementById
      parameters:
        - name: agreementId
          in: path
          description: The identifier of the agreement to update
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: The updated agreement data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAgreementSeed'
        required: true
      responses:
        '200':
          description: Agreement updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agreement'
        '404':
          description: Agreement not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
  /agreements:
    parameters:
      - $ref: '#/components/parameters/CorrelationIdHeader'
      - $ref: '#/components/parameters/IpAddress'
    post:
      security:
        - bearerAuth: []
      tags:
        - agreement
      summary: Add a new agreement
      operationId: addAgreement
      requestBody:
        description: A Agreement seed
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AgreementSeed'
        required: true
      responses:
        '200':
          description: Agreement created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agreement'
        '400':
          description: Invalid input
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '409':
          description: Agreement already exists
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
    get:
      tags:
        - agreement
      summary: Retrieve a list of agreement
      operationId: getAgreements
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: producerId
          schema:
            type: string
        - in: query
          name: consumerId
          schema:
            type: string
        - in: query
          name: eserviceId
          schema:
            type: string
        - in: query
          name: descriptorId
          schema:
            type: string
        - in: query
          name: states
          description: comma separated sequence of agreement states to filter the response with
          schema:
            type: array
            items:
              $ref: '#/components/schemas/AgreementState'
            default: [ ]
          explode: false
        - in: query
          name: attributeId
          schema:
            type: string
      responses:
        '200':
          description: A list of Agreement
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agreements'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
  '/agreements/{agreementId}/contract':
    parameters:
      - $ref: '#/components/parameters/CorrelationIdHeader'
      - $ref: '#/components/parameters/IpAddress'
    post:
      tags:
        - agreement
      summary: Create the agreement contract
      operationId: addAgreementContract
      security:
        - bearerAuth: []
      parameters:
        - name: agreementId
          in: path
          description: the agreement id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: A Agreement Contract seed
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentSeed'
        required: true
      responses:
        '200':
          description: Agreement Document create
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '400':
          description: Bad request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Agreement not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '409':
          description: Agreement Contract already exists
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
  '/agreements/{agreementId}/consumer-documents':
    parameters:
      - $ref: '#/components/parameters/CorrelationIdHeader'
      - $ref: '#/components/parameters/IpAddress'
      - name: agreementId
        in: path
        schema:
          type: string
          format: uuid
        required: true
    post:
      security:
        - bearerAuth: []
      tags:
        - agreement
      summary: Add a consumer Document to an Agreement
      description: Add a consumer Document to an Agreement
      operationId: addAgreementConsumerDocument
      responses:
        '200':
          description: Returns the document.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Resource Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentSeed'
        description: the document seed
        required: true
  '/agreements/{agreementId}/consumer-documents/{documentId}':
    parameters:
      - $ref: '#/components/parameters/CorrelationIdHeader'
      - $ref: '#/components/parameters/IpAddress'
      - name: agreementId
        in: path
        schema:
          type: string
          format: uuid
        required: true
      - name: documentId
        in: path
        schema:
          type: string
          format: uuid
        required: true
    get:
      security:
        - bearerAuth: []
      tags:
        - agreement
      summary: Retrieve a consumer Document of an Agreement
      description: Retrieve a consumer Document of an Agreement
      operationId: getAgreementConsumerDocument
      responses:
        '200':
          description: Document retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Resource Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
    delete:
      security:
        - bearerAuth: []
      tags:
        - agreement
      summary: Remove a consumer Document from an Agreement
      description: Remove a consumer Document from an Agreement
      operationId: removeAgreementConsumerDocument
      responses:
        '204':
          description: Document removed
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Resource Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
components:
  parameters:
    CorrelationIdHeader:
      in: header
      name: X-Correlation-Id
      required: true
      schema:
        type: string
    IpAddress:
      in: header
      name: X-Forwarded-For
      schema:
        type: string
  schemas:
    AgreementState:
      type: string
      description: Agreement State
      enum:
        - DRAFT
        - PENDING
        - ACTIVE
        - SUSPENDED
        - ARCHIVED
        - MISSING_CERTIFIED_ATTRIBUTES
        - REJECTED
    AgreementSeed:
      type: object
      description: contains the expected payload for attributes persistence.
      properties:
        eserviceId:
          type: string
          format: uuid
        descriptorId:
          type: string
          format: uuid
        producerId:
          type: string
          format: uuid
        consumerId:
          type: string
          format: uuid
        verifiedAttributes:
          type: array
          description: 'set of the verified attributes belonging to this agreement, if any.'
          items:
            $ref: '#/components/schemas/AttributeSeed'
        certifiedAttributes:
          type: array
          description: 'set of the certified attributes belonging to this agreement, if any.'
          items:
            $ref: '#/components/schemas/AttributeSeed'
        declaredAttributes:
          type: array
          description: 'set of the declared attributes belonging to this agreement, if any.'
          items:
            $ref: '#/components/schemas/AttributeSeed'
        consumerNotes:
          type: string
      required:
        - eserviceId
        - descriptorId
        - producerId
        - consumerId
        - verifiedAttributes
        - certifiedAttributes
        - declaredAttributes
    UpdateAgreementSeed:
      type: object
      description: contains the admitted payload for agreement update.
      properties:
        state:
          $ref: '#/components/schemas/AgreementState'
        certifiedAttributes:
          type: array
          description: 'set of the certified attributes belonging to this agreement, if any.'
          items:
            $ref: '#/components/schemas/CertifiedAttribute'
        declaredAttributes:
          type: array
          description: 'set of the declared attributes belonging to this agreement, if any.'
          items:
            $ref: '#/components/schemas/DeclaredAttribute'
        verifiedAttributes:
          type: array
          description: 'set of the verified attributes belonging to this agreement, if any.'
          items:
            $ref: '#/components/schemas/VerifiedAttribute'
        suspendedByConsumer:
          type: boolean
        suspendedByProducer:
          type: boolean
        suspendedByPlatform:
          type: boolean
        stamps:
          $ref: '#/components/schemas/Stamps'
        consumerNotes:
          type: string
        rejectionReason:
          type: string
        suspendedAt:
          type: string
          format: date-time
      required:
        - state
        - verifiedAttributes
        - certifiedAttributes
        - declaredAttributes
        - stamps
    UpgradeAgreementSeed:
      type: object
      description: contains the expected payload for attributes persistence.
      properties:
        descriptorId:
          type: string
          format: uuid
        stamp:
          $ref: '#/components/schemas/Stamp'
      required:
        - descriptorId
        - stamp
    Stamp:
      type: object
      properties:
        who:
          type: string
          format: uuid
        when:
          type: string
          format: date-time
      required:
        - who
        - when
    Stamps:
      type: object
      properties:
        submission:
          $ref: '#/components/schemas/Stamp'
        activation:
          $ref: '#/components/schemas/Stamp'
        rejection:
          $ref: '#/components/schemas/Stamp'
        suspensionByProducer:
          $ref: '#/components/schemas/Stamp'
        suspensionByConsumer:
          $ref: '#/components/schemas/Stamp'
        upgrade:
          $ref: '#/components/schemas/Stamp'
        archiving:
          $ref: '#/components/schemas/Stamp'
    Agreement:
      type: object
      properties:
        id:
          type: string
          format: uuid
        eserviceId:
          type: string
          format: uuid
        descriptorId:
          type: string
          format: uuid
        producerId:
          type: string
          format: uuid
        consumerId:
          type: string
          format: uuid
        state:
          $ref: '#/components/schemas/AgreementState'
        verifiedAttributes:
          type: array
          description: 'set of the verified attributes belonging to this agreement, if any.'
          items:
            $ref: '#/components/schemas/VerifiedAttribute'
        certifiedAttributes:
          type: array
          description: 'set of the certified attributes belonging to this agreement, if any.'
          items:
            $ref: '#/components/schemas/CertifiedAttribute'
        declaredAttributes:
          type: array
          description: 'set of the declared attributes belonging to this agreement, if any.'
          items:
            $ref: '#/components/schemas/DeclaredAttribute'
        suspendedByConsumer:
          type: boolean
        suspendedByProducer:
          type: boolean
        suspendedByPlatform:
          type: boolean
        consumerDocuments:
          type: array
          items:
            $ref: '#/components/schemas/Document'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        consumerNotes:
          type: string
        contract:
          $ref: '#/components/schemas/Document'
        stamps:
          $ref: '#/components/schemas/Stamps'
          type: string
        rejectionReason:
          type: string
        suspendedAt:
          type: string
          format: date-time
      required:
        - id
        - eserviceId
        - descriptorId
        - producerId
        - consumerId
        - state
        - verifiedAttributes
        - certifiedAttributes
        - declaredAttributes
        - consumerDocuments
        - createdAt
        - stamps
      description: business representation of an agreement
    Agreements:
      type: array
      items:
        $ref: '#/components/schemas/Agreement'
    Problem:
      properties:
        type:
          description: URI reference of type definition
          type: string
        status:
          description: The HTTP status code generated by the origin server for this occurrence of the problem.
          example: 503
          exclusiveMaximum: true
          format: int32
          maximum: 600
          minimum: 100
          type: integer
        title:
          description: A short, summary of the problem type. Written in english and readable
          example: Service Unavailable
          maxLength: 64
          pattern: '^[ -~]{0,64}$'
          type: string
        correlationId:
          description: Unique identifier of the request
          example: '53af4f2d-0c87-41ef-a645-b726a821852b'
          maxLength: 64
          type: string
        detail:
          description: A human readable explanation of the problem.
          example: Request took too long to complete.
          maxLength: 4096
          pattern: '^.{0,1024}$'
          type: string
        errors:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/ProblemError'
      additionalProperties: false
      required:
        - type
        - status
        - title
        - errors
    ProblemError:
      properties:
        code:
          description: Internal code of the error
          example: 123-4567
          minLength: 8
          maxLength: 8
          pattern: '^[0-9]{3}-[0-9]{4}$'
          type: string
        detail:
          description: A human readable explanation specific to this occurrence of the problem.
          example: Parameter not valid
          maxLength: 4096
          pattern: '^.{0,1024}$'
          type: string
      required:
        - code
        - detail
    VerifiedAttribute:
      title: VerifiedAttribute
      type: object
      description: represents the details of a verified attribute bound to the agreement.
      properties:
        id:
          type: string
          description: identifier of the attribute as defined on the attribute registry
          format: uuid
      required:
        - id
    CertifiedAttribute:
      title: CertifiedAttribute
      type: object
      description: represents the details of a certified attribute bound to the agreement.
      properties:
        id:
          type: string
          description: identifier of the attribute as defined on the attribute registry
          format: uuid
      required:
        - id
    DeclaredAttribute:
      title: DeclaredAttribute
      type: object
      description: represents the details of a declared attribute bound to the agreement.
      properties:
        id:
          type: string
          description: identifier of the attribute as defined on the attribute registry
          format: uuid
      required:
        - id
    Document:
      type: object
      required:
        - id
        - name
        - prettyName
        - contentType
        - path
        - createdAt
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        prettyName:
          type: string
        contentType:
          type: string
        path:
          type: string
        createdAt:
          type: string
          format: date-time
    DocumentSeed:
      type: object
      required:
        - id
        - name
        - prettyName
        - contentType
        - path
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        prettyName:
          type: string
        contentType:
          type: string
        path:
          type: string
    AttributeSeed:
      title: AttributeSeed
      type: object
      description: represents the details of an attribute bound to the agreement.
      properties:
        id:
          type: string
          description: identifier of the attribute as defined on the attribute registry
          format: uuid
      required:
        - id
  securitySchemes:
    bearerAuth:
      type: http
      description: 'A bearer token in the format of a JWS and conformed to the specifications included in [RFC8725](https://tools.ietf.org/html/RFC8725).'
      scheme: bearer
      bearerFormat: JWT d'Interoperabilità di AgID (default)
